<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Songli's rock place]]></title>
  <link href="http://mrdefinite.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://mrdefinite.github.io/"/>
  <updated>2015-03-31T23:39:58+08:00</updated>
  <id>http://mrdefinite.github.io/</id>
  <author>
    <name><![CDATA[Songli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Andoird反编译和代码注入（一）]]></title>
    <link href="http://mrdefinite.github.io/blog/2015/03/31/andoirdfan-bian-yi-he-dai-ma-zhu-ru-(%5B%3F%5D-)/"/>
    <updated>2015-03-31T23:03:45+08:00</updated>
    <id>http://mrdefinite.github.io/blog/2015/03/31/andoirdfan-bian-yi-he-dai-ma-zhu-ru-([?]-)</id>
    <content type="html"><![CDATA[<p>前段时间帮妹子做了个小project，希望能够向某个现成的Android APK文件中注入一段恶意代码，从而能够拿到用户的数据。当然本文的关注点不在恶意代码上，而是如何进行代码的注入，以及注入后如何重新打包为APK，签名后提供给用户使用。</p>

<p>本文需要用到的工具有：</p>

<ol>
<li><a href="http://ibotpeaches.github.io/Apktool/">apktool</a>，用于反编译和重新打包Android程序；</li>
<li><a href="https://code.google.com/p/signapk/">signapk</a>，用于给重新打包后的APK签名；</li>
<li><a href="http://code.google.com/p/dex2jar/">dex2jar</a>，用于将dex文件转换为jar文件，非必须；</li>
<li><a href="http://jd.benow.ca/">JD-GUI</a>，用来反编译Java的class文件，非必须。</li>
</ol>


<p>首先介绍整个注入过程的思路：</p>

<ol>
<li>首先获取一个APK文件，这里假设为good.apk；</li>
<li>使用apktool反编译good.apk，获得包含了所有源码文件夹。其目录结构和开发中的Android代码很类似，其中有layout文件、AndroidManifest.xml文件、编译为smali字节码的Java代码等等；</li>
<li>接下来就是关键的代码注入部分。由于我们拿到的是编译为字节码的smali，因此我们需要在理解smali的基础上，将我们自己的代码同样编译成smali后，插入到源代码中；</li>
<li>代码注入完成后，使用apktool重新打包，例如打包为bad.apk；</li>
<li>最后使用signapk将bad.apk签名，得到bad_signed.apk，就可以让用户安装了。</li>
</ol>


<p>那么上文提到的dex2jar和JD-GUI用在什么地方呢。前面提到我们需要理解smali字节码，这其实是一个相对费力的工作，因为我们希望能够将其反编译为易读的Java代码。两者对比起来，就容易理解多了。这里就要用到这两个工具了。</p>

<p>首先将good.apk直接解压，这个工作可以使用常见的压缩工具来完成，不在赘述。</p>

<p><img class="classes.dex" src="../images/2015-03-31-classes-dex.jpg" width="300" height="300" title="classes.dex" ></p>

<p>如图，我们需要其中的classes.dex文件。dex实际上也是一种字节码，被Android系统中的Dalvik虚拟机所使用。这里我们利用dex2jar工具将其转换成了普通的Java jar包，里面是我们所熟悉的Java class文件。最后，使用JD-GUI就可以看到反编译回去的源码啦。</p>
]]></content>
  </entry>
  
</feed>
